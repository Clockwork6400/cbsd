#!/usr/local/bin/cbsd
#v12.1.9
CBSDMODULE="build"
MYARG="dst"
MYOPTARG="emulator init_freebsd_pkg qemu"
MYDESC="Misc fixes under base hier"
ADDHELP="
${H3_COLOR}Description${N0_COLOR}:

This script complements the hierarchy by adding several 
symlinks or by creating the missing dir.

${H3_COLOR}Options${N0_COLOR}:

 ${N2_COLOR}emulator${N0_COLOR}  - copy QEMU usermode files for chrooting,
             eg: emulator=qemu-arm;
 ${N2_COLOR}init_freebsd_pkg     - init/bootstrap pkg(8) tools, 1 - yes (default;
${H3_COLOR}Examples${N0_COLOR}:

 # cbsd preparebase dst=/usr/jails/basejail/base_amd64_amd64_14.0

"


. ${subrdir}/nc.subr
qemu=
init_freebsd_pkg=1
. ${cbsdinit}

[ -z "${qemu}" ] && qemu=1

[ ! -d "${dst}" ] && err 1 "No such dir: ${dst}"
[ ! -d "${dst}/home" ] && ${MKDIR_CMD} -m 0755 "${dst}/home"

case "${platform}" in
	DragonFly)
		[ ! -d "${dst}/usr/dports" ] && ${MKDIR_CMD} -m 0755 "${dst}/usr/dports"
		[ ! -d "${dst}/usr/obj" ] && ${MKDIR_CMD} -m 0755 "${dst}/usr/obj"
		;;
	*)
		[ ! -d "${dst}/usr/ports" ] && ${MKDIR_CMD} -m 0755 "${dst}/usr/ports"
		;;
esac

[ ! -d "${dst}/var/db/pkg" ] && ${MKDIR_CMD} -m 0755 "${dst}/var/db/pkg"

# https://cgit.freebsd.org/src/commit/?id=8955236a10137a1b645e642baf4eaca9c6460547
#if [ ! -h "${dst}/home" ]; then
#	${LN_CMD} -sf "/home" "${dst}/usr/home"
#fi

[ ! -h "${dst}/usr/bin/perl" ] && ${LN_CMD} -sf "/usr/local/bin/perl" "${dst}/usr/bin/perl"
[ ! -h "${dst}/usr/bin/perl5" ] && ${LN_CMD} -sf "/usr/local/bin/perl" "${dst}/usr/bin/perl5"
[ ! -h "${dst}/bin/zsh" ] && ${LN_CMD} -sf "/usr/local/bin/zsh" "${dst}/bin/zsh"
[ ! -h "${dst}/bin/bash" ] && ${LN_CMD} -sf "/usr/local/bin/bash" "${dst}/bin/bash"

[ -h "${dst}/compat" ] && ${RM_CMD} -f ${dst}/compat
[ ! -d "${dst}/compat" ] && ${MKDIR_CMD} -m 0755 "${dst}/compat"

[ ! -d "${dst}/usr/local" ] && ${MKDIR_CMD} -m 0755 "${dst}/usr/local"

# remove unecessary resources
[ -d "${dst}/usr/lib/debug" ] && ${RM_CMD} -rf ${dst}/usr/lib/debug

# Init PKG in basedir
# offline?
# native only?
hoster_ver=$( ${miscdir}/elf_tables --freebsdver /bin/sh )
base_ver=$( ${miscdir}/elf_tables --freebsdver ${BASE_DIR}/bin/sh )

if [ "${init_freebsd_pkg}" = "1" ]; then
	if [ "${hoster_ver}" = "${base_ver}" ]; then
		_pkg_bin="pkg"

		CBSDPATH="${PATH}"

		# temporary copy resolv.conf
		_tmp_resolv=0
		if [ ! -r ${dst}/etc/resolv.conf ]; then
			_tmp_resolv=1
			${CP_CMD} /etc/resolv.conf ${dst}/etc/resolv.conf
		fi

		# temporary copy cert.pem ?
		_tmp_cert=0
		if [ ! -e ${dst}/etc/ssl/cert.pem ]; then
			_tmp_resolv=1
			${CP_CMD} /etc/ssl/cert.pem ${dst}/etc/ssl/cert.pem
		fi

		case "${platform}" in
			DragonFly)
				# Dfly use already bootstraped pkg, just copy from host system
				if [ -x /usr/local/sbin/pkg-static ]; then
					[ ! -d "${dst}/usr/local/sbin" ] && ${MKDIR_CMD} -m 0755 ${dst}/usr/local/sbin
					${CP_CMD} -a /usr/local/sbin/pkg-static ${dst}/usr/local/sbin/
					_pkg_bin="pkg-static"
				fi
				if [ -x /usr/local/sbin/pkg ]; then
					[ ! -d "${dst}/usr/local/sbin" ] && ${MKDIR_CMD} -m 0755 ${dst}/usr/local/sbin
					${CP_CMD} -a /usr/local/sbin/pkg ${dst}/usr/local/sbin/
					_pkg_bin="pkg"
				fi
				# DFLY: no pkg.conf by default?
				[ ! -d ${dst}/usr/local/etc/pkg ] && ${MKDIR_CMD} -p -m 0755 ${dst}/usr/local/etc/pkg
				[ -d /usr/local/etc/pkg/repos ] && ${CP_CMD} -a /usr/local/etc/pkg/repos ${dst}/usr/local/etc/pkg/
				${MOUNT_CMD} -t devfs devfs ${dst}/dev
				${CHROOT_CMD} ${dst} /bin/sh <<EOF
export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
env ASSUME_ALWAYS_YES=yes SIGNATURE_TYPE=none IGNORE_OSVERSION=yes timeout 30 ${_pkg_bin} update -f || true
EOF
				${UMOUNT_CMD} ${dst}/dev
				;;
			*)
				${MOUNT_CMD} -t devfs devfs ${dst}/dev
#env ASSUME_ALWAYS_YES=yes SIGNATURE_TYPE=none IGNORE_OSVERSION=yes timeout 30 ${_pkg_bin} bootstrap -y -f || true
				${CHROOT_CMD} ${dst} /bin/sh <<EOF
export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
env ASSUME_ALWAYS_YES=yes SIGNATURE_TYPE=none IGNORE_OSVERSION=yes timeout 30 ${_pkg_bin} update -f || true
EOF
				${UMOUNT_CMD} ${dst}/dev
				;;
		esac

		if [ ${_tmp_resolv} -eq 1 ]; then
			${RM_CMD} -f ${dst}/etc/resolv.conf
		fi

		if [ ${_tmp_cert} -eq 1 ]; then
			${RM_CMD} -f ${dst}/etc/ssl/cert.pem
		fi

		# this is /usr/local/*, which is jail level, remove after bootstrap.
		[ -x "${dst}/usr/local/sbin/pkg" ] && ${RM_CMD} -f "${dst}/usr/local/sbin/pkg"
		[ -x "${dst}/usr/local/sbin/pkg-static" ] && ${RM_CMD} -f "${dst}/usr/local/sbin/pkg-static"
	fi
fi

if [ "${qemu}" = "1" ]; then
	# for qemu user mode
	[ -z "${emulator}" ] && exit 0
	[ "${emulator}" = "jail" -o "${emulator}" = "bhyve" ] && exit 0

	echo " * Copying emulator to /bin" 1>&2
	. ${subrdir}/emulator.subr
	init_usermode_emul

	[ ! -d "${dst}/bin" ] && ${MKDIR_CMD} -m 0755 -p ${dst}/bin
	[ ! -r ${emultest} ] && err 1 "${N1_COLOR}${CBSD_APP}: no such emulator: ${N2_COLOR}${emultest}${N0_COLOR}"
	emulfile=$( ${BASENAME_CMD} ${emultest} )
	[ ! -r ${dst}/bin/${emulfile} ] && ${CP_CMD} -a ${emultest} ${dst}/bin/
	[ ! -r ${dst}/bin/${emulfile} ] && err 1 "${N1_COLOR}${CBSD_APP}: unable to copy: ${N2_COLOR}cp ${emultest} ${dst}/bin/${N0_COLOR}"
fi


exit 0
